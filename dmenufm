#!/bin/sh

# Dmenu-based directory browser
# Dependency: dmenu; xclip
# Dependency on extraction: tar; unlzma; bunzip2; unrar; unzip; uncompress; 7z; unxz; cabextract.


### OPTIONS AND VARIABLES

## OPTIONS
# FILES LOCATION
[ -n "$DMENUFM_PATH" ] || DMENUFM_PATH="$HOME/.config/dmenufm"
[ -n "$DMENUFM_TRASH_PATH" ] || DMENUFM_TRASH_PATH="$DMENUFM_PATH/trash"
[ -n "$DMENUFM_BMKFILE" ] || DMENUFM_BMKFILE="$DMENUFM_PATH/dmenufm_bookmark"
[ -n "$DMENUFM_CMDFILE" ] || DMENUFM_CMDFILE="$DMENUFM_PATH/dmenufm_command"
[ -n "$DMENUFM_HISFILE" ] || DMENUFM_HISFILE="$DMENUFM_PATH/dmenufm_history"
[ -n "$DMENUFM_LAST_PATH_FILE" ] || DMENUFM_LAST_PATH_FILE="$DMENUFM_PATH/dmenufm_lastpath"
[ -n "$DMENUFM_MAX_HIS_LENGTH" ] || DMENUFM_MAX_HIS_LENGTH=5000
[ -n "$DMENUFM_BULK_RENAMEFILE" ] || DMENUFM_BULK_RENAMEFILE="$DMENUFM_PATH/dmenufm_bulk_rename"
# FONTS
[ -n "$DMENUFM_GENERIC_FONT" ] || DMENUFM_GENERIC_FONT="Monospace-15"
[ -n "$DMENUFM_NOTIF_FONT" ] || DMENUFM_NOTIF_FONT="Monospace-25"
[ -n "$DMENUFM_DANGER_FONT" ] || DMENUFM_DANGER_FONT="Monospace-20"
# COLORs
[ -n "$DMENUFM_GENERIC_COLOR" ] || DMENUFM_GENERIC_COLOR="#005577"
[ -n "$DMENUFM_ACTION_COLOR_LV1" ] || DMENUFM_ACTION_COLOR_LV1="#33691e"
[ -n "$DMENUFM_ACTION_COLOR_LV2" ] || DMENUFM_ACTION_COLOR_LV2="#FF8C00"
[ -n "$DMENUFM_ACTION_COLOR_BULK" ] || DMENUFM_ACTION_COLOR_BULK="#CB06CB"

# xdg-open directories
XDGDIR1="/usr/share/applications"
XDGDIR2="/usr/local/share/applications"

## GLOBAL VARIABLES
CHOICE="placeholder"
actCHOICE="placeholder"
allselection="placeholder"
TARGET="./"
BACKWARD="../"
ENDSELECTION="End Selection"
allowmulti="NotAllowed"
ACTION="Actions"
TERM="Terminal"
FM_PCP="PCP - Copy path"
FM_NEW="NEW - Create new file / directory"
FM_DEL="DEL - Delete files / directories"
FM_MVR="MVR - Move files / directories"
FM_YAK="YAK - Copy files / directories"
FM_REM="REM - Rename files / directories"
FM_TRH="TRH - Trash of dmenufm"
FM_HIS="HIS - History of dmenufm"
FM_BMK="BMK - Bookmark for dmenufm"
FM_CMD="CMD - Frequently used command"
ACTLIST="$FM_PCP:$FM_NEW:$FM_MVR:$FM_YAK:$FM_DEL:$FM_TRH:$FM_REM:$FM_HIS:$FM_BMK:$FM_CMD"


### FUNCTIONS

## OS FUNCTION

get_os () {
	case $OSTYPE in
		# Mac OS X / macOS.
		darwin*) DMENUFM_OPENER=open ;;
	esac
}

## OPEN FUNCTIONS

# You may need to modify executecmd to match how your terminal execute the command.
# Use `< $(locate $software.desktop | tail -n 1) grep "Terminal=false` to check whether the .desktop file should open in terminal
# Like sxiv, the desktop file don't have Terminal entry. You need to Use `< $(locate sxiv.desktop | tail -n 1) sudo $EDITOR` to add `Terminal=false`
executecmd () {
	software=$(printf '%s' "$1" | awk -F ' ' '{print $1}')
	if < "$(find "$XDGDIR1" "$XDGDIR2" *"$software"*.desktop | tail -n 1)" grep "Terminal=false"; then
		printf '%s' "$1" | ${SHELL:-"/bin/sh"}
	else
		$TERMINAL -e $1 | ${SHELL:-"/bin/sh"}
	fi
}

# Open files with xdg-open, if not compression.
# Compressions are extracted by its file extension.
# Use extraction to put content in a new directory.
# To edit default applications in xdg-open,
# sudo $EDITOR /usr/share/applications/mimeinfo.cache
open () {
	mimetype=$(xdg-mime query filetype "$1")
	case "$1" in
		*.tar.bz2|*.tar.xz|*.tbz2) extraction "tar xvjf" "$1" ;;
		*.tar.gz|*.tgz) extraction "tar xvzf" "$1" ;;
		*.lzma) extraction "unlzma" "$1" ;;
		*.bz2) extraction "bunzip2" "$1" ;;
		*.rar) extraction "unrar x -ad" "$1" ;;
		*.gz) extraction "gunzip" "$1" ;;
		*.tar) extraction "tar xvf" "$1" ;;
		*.zip) extraction "unzip" "$1" ;;
		*.Z) extraction "uncompress" "$1" ;;
		*.7z) extraction "7z x" "$1" ;;
		*.xz) extraction "unxz" "$1" ;;
		*.exe) extraction "cabextract" "$1" ;;
		*)
			case "$mimetype" in
				text/*|*x-empty*|*json*)
					# Text file opened in $EDITOR or default opener
					if [ -n "$TERMINAL" ] && [ -n "$EDITOR" ]; then
						$TERMINAL -e $EDITOR "$1"
					else
						${DMENUFM_OPENER:-xdg-open} "$1"
					fi
					;;
				*)
					appdesktop=$(xdg-mime query default "$mimetype")
					if < "$(find "$XDGDIR1" "$XDGDIR2" -name "$appdesktop" | tail -n 1)" grep "Terminal=false"; then
						${DMENUFM_OPENER:-xdg-open} "$1"
					else
						$TERMINAL -e ${DMENUFM_OPENER:-xdg-open} "$1"
					fi
					;;
			esac
	esac
}


## MENUFUNCTIONS

# Generate directories
# Variables cannot store multiline string, so transform to ':'
# Misbehaving due to space in file/directory name, so add ' at beginning and end.
menudir () {
	DIRs=$(for dir in *; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotdirectories
# Delete extra ./ and ../ (Need use = as sed delimiter)
menudotdir () {
	DOTDIRs=$(for dir in .*; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/; s=./==; s=../==")
}

# Generate files
menufile () {
	FILEs=$(for file in *; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotfiles
menudotfile () {
	DOTFILEs=$(for file in .*; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update menu in each move
update_menu () {
	list=
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}

# Generate menu for action choice, only for current directory.
# $1 is the prompt, $2 is the selected background color
Generate_action_menu () {
	while [ -n "$actCHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		if [ -n "$multiselection" ]; then
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$ENDSELECTION" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$1" "$2")
		elif [ "$allowmulti" != "NotAllowed" ]; then
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$allowmulti" "$allselection" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$1" "$2")
		else
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$1" "$2")
		fi
		# Outcome matching
		if [ "$actCHOICE" = "$TARGET" ]; then
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			[ -n "$multiselection" ] && multilist="$multilist:$HERE" && cd "../"
			break
		elif [ "$actCHOICE" = "$BACKWARD" ]; then
			cd "../" || return
			dmenufm_history
		elif [ "$actCHOICE" = "$ENDSELECTION" ]; then
			multiselection=
			break
		elif [ "$actCHOICE" = "$allowmulti" ]; then
			multiselection="true"
			break
		elif [ "$actCHOICE" = "$allselection" ]; then
			multiselection=
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			break
		elif [ -d "$actCHOICE" ]; then
			cd "$actCHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$actCHOICE" ] || [ -n "$rename" ]; then
			HERE=$(printf '%s' "$PWD/$actCHOICE")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			[ -n "$multiselection" ] && multilist="$multilist:$HERE"
			break
		else
			HERE=
			name=
			multiselection=
			actCHOICE="placeholder"
			break
		fi
	done
}

## PROMPT FUNCTIONS
verticalprompt () {
	# $1 is prompt
	dmenu -fn "$DMENUFM_GENERIC_FONT" -i -sb "$2" -l 10 -p "$1"
}

horizontalprompt () {
	# $1 is prompt
	dmenu -fn "$DMENUFM_GENERIC_FONT" -i -sb "$2" -p "$1" <&-
}

notifyprompt () {
	dmenu -fn "$DMENUFM_NOTIF_FONT" -sb "#d79921" -sf "#1d2021" -nf "#000000" -nb "#000000" -p "$1" <&-
}

# Prompt that used in dangerous action
dangerprompt () {
	# From Luke Smith
	# Use && command to execute the command after "Yes"
	[ "$(printf "No\\nYes" | dmenu -fn "$DMENUFM_DANGER_FONT" -i -p "$1" -nb darkred -sb red -sf white -nf gray )" = "Yes" ]
}


## TOOL FUNCTIONS

# Store every move between directories into history
dmenufm_history () {
	[ ! -d "$DMENUFM_PATH" ] && mkdir -p "$DMENUFM_PATH"
	dirmark=$(printf '%s' "$PWD" | awk -F '/' '{print $NF}')
	printf '%s\n' "$dirmark - $PWD" | sed "/^$/ d" >> "$DMENUFM_HISFILE"
	# Limit the max number of history
	hisnum=$(wc -l "$DMENUFM_HISFILE" | awk '{print $1}')
	if [ "$hisnum" -ge "$DMENUFM_MAX_HIS_LENGTH" ]; then
		sed "1d" "$DMENUFM_HISFILE" > "$DMENUFM_HISFILE.backup" && cp "$DMENUFM_HISFILE.backup" "$DMENUFM_HISFILE"
	fi
}

# Extract files and make a new directory to contain all the files.
extraction () {
	# $1: command to extract compress
	# $2: compression name
	# Example: extraction "unzip" "$HOME/filename.zip"
	dirname="$(printf '%s' "$2" | awk -F '/' '{printf $NF}' | awk -F '.' '{print $1}')"
	mkdir -p "$dirname" && cd "$dirname" || exit
	$1 "$2"
	notifyprompt "$CHOICE extracted to $dirname"
}

dmenufm_multiselect () {
	# $1 for the prompt when multi selecting
	# $2 for prompt if it is dangerous
	multiprompt=$1
	dangerousmessage=$2
	HERE=
	multilist=
	Generate_action_menu "$multiprompt" "$DMENUFM_ACTION_COLOR_BULK" || return && allowmulti="NotAllowed"
	while [ -n "$multiselection" ]; do
		Generate_action_menu "$multiprompt" "$DMENUFM_ACTION_COLOR_BULK" || return && allowmulti="NotAllowed"
		HERE=$multilist
		allowmulti="NotAllowed"
	done

	SELECTED=$(printf '%s' "$HERE" | cut -b2- | tr ':' '\n' | uniq)
	allowmulti="NotAllowed"

	[ "$actCHOICE" = "$ENDSELECTION" ] && printf '%s' "$SELECTED" | verticalprompt "Selected files (Enter to continue): " "$DMENUFM_ACTION_COLOR_LV1"
	[ "$actCHOICE" = "$ENDSELECTION" ] && [ -n "$dangerousmessage" ] && dangerprompt "$dangerousmessage"
}

# Actions that for dmenufm
# Note: Use `[ -n "$VAR" ]` after each menu to check whether the menu is correctly execute.
# 	If not, then the later command will not execute.
dmenufm_action () {
	move=$(printf '%s' "$ACTLIST" | tr ':' '\n' | verticalprompt "Actions:" "$DMENUFM_GENERIC_COLOR")
	case $move in
		"$FM_PCP")
			# Copy path to xclip, and send notification.
			Generate_action_menu "Copy directory/file path: " "$DMENUFM_ACTION_COLOR_LV1" || return
			[ -n "$HERE" ] && printf '%s' "$HERE" | xclip -selection clipboard && notifyprompt "Path $name copied to clipboard."
			;;
		"$FM_NEW")
			name=$(horizontalprompt "Dir ends w/ slash; File w/o: " "$DMENUFM_ACTION_COLOR_LV1") || return
			if [ -n "$( printf "$name" | grep '/')" ]; then
				mkdir -p "$name" && notifyprompt "Directory $name created."
			else
				:>"$name" && notifyprompt "File $name created."
			fi
			;;
		"$FM_MVR"|"$FM_YAK")
			cmd="mv" && cmdname="moved" && cmdverb="move" && allowmulti="Bulk move" && allselection="Bulk move all"
			[ "$move" = "$FM_YAK" ] && cmd="cp -R" && cmdname="copied" && cmdverb="copy" && allowmulti="Bulk copy" && allselection="Bulk copy all"
			Generate_action_menu "Source: " "$DMENUFM_ACTION_COLOR_LV1" || return && allowmulti="NotAllowed"
			if [ -n "$multiselection" ]; then
				# Multi-selection mode
				# No need for dangerousmessage
				dmenufm_multiselect "Select files / directories to $cmdverb: " ""
				[ "$actCHOICE" = "$ENDSELECTION" ] && Generate_action_menu "Destination: " "$DMENUFM_ACTION_COLOR_LV2" || return && rename= && allowmulti="NotAllowed"
				[ -n "$HERE" ] && destination="$HERE" && destname="$name"
				if [ -n "$destination" ]; then
					for selection in $(printf '%s' "$SELECTED"); do
						$cmd "$selection" "$destination"
					done && notifyprompt "Selected files / directories $cmdname to $destname"
				fi
			elif [ "$actCHOICE" = "$allselection" ]; then
				# All-selection mode
				SELECTED=$(printf '%s' "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d; s=^=$PWD/=g")
				[ -n "$SELECTED" ] && printf '%s' "$SELECTED" | verticalprompt "Selected files (Enter to continue): " "$DMENUFM_ACTION_COLOR_LV1"
				[ -n "$SELECTED" ] && Generate_action_menu "Destination: " "$DMENUFM_ACTION_COLOR_LV2" || return && rename= && allowmulti="NotAllowed"
				[ -n "$HERE" ] && destination="$HERE" && destname="$name"
				if [ -n "$destination" ]; then
					for selection in $(printf '%s' "$SELECTED"); do
						$cmd "$selection" "$destination"
					done && notifyprompt "All files / directories $cmdname to $destname"
				fi

			else
				# Single-selection mode
				[ -n "$HERE" ] && start="$HERE" && startname="$name" && rename="true"
				[ -d "$start" ] && cd "../"
				[ -n "$start" ] && Generate_action_menu "Destination / Type new name: " "$DMENUFM_ACTION_COLOR_LV2" || return && rename= && actCHOICE="placeholder"
				[ -n "$HERE" ] && destination="$HERE" && destname="$name"
				[ -n "$HERE" ] && $cmd "$start" "$destination" && notifyprompt "$startname $cmdname to $destname"
				rename=
			fi
			;;
		"$FM_REM")
			allowmulti="Bulk Rename"
			allselection="Bulk Rename all"
			Generate_action_menu "Source: " "$DMENUFM_ACTION_COLOR_LV1" || return && allowmulti="NotAllowed"
			if [ -n "$multiselection" ]; then
				dmenufm_multiselect "Select files / directories to rename: " ""
				printf '%s\n' "$SELECTED" > "$DMENUFM_BULK_RENAMEFILE.backup"  && cp "$DMENUFM_BULK_RENAMEFILE.backup" "$DMENUFM_BULK_RENAMEFILE"
				open "$DMENUFM_BULK_RENAMEFILE"
				if [ $(< "$DMENUFM_BULK_RENAMEFILE" wc -l) -ne $(< "$DMENUFM_BULK_RENAMEFILE.backup" wc -l) ]; then
					notifyprompt "ERROR: Lines mismatch in rename file; do nothing." && return
				else
					bulkrename=$(paste -d ':' "$DMENUFM_BULK_RENAMEFILE.backup" "$DMENUFM_BULK_RENAMEFILE")
					for selection in $(printf '%s' "$bulkrename"); do
						start=$(printf '%s' "$selection" | awk -F ':' '{print $1}')
						destination=$(printf '%s' "$selection" | awk -F ':' '{print $2}')
						echo "DEBUG: start is $start"
						echo "DEBUG: destination is $destination"
						mv "$start" "$destination"
					done && notifyprompt "Selected renamed"
				fi
			elif [ "$actCHOICE" = "$allselection" ]; then
				return
			else
				return
			fi
			# TODO
			# Code Note:
			# paste file1 file2
			return
			;;
		"$FM_DEL")
			# Allow multiple files to be selected
			allowmulti="Bulk Remove"
			allselection="Bulk Remove all"
			# Choose file/directory in current directory to remove
			Generate_action_menu "Remove file / directory: " "$DMENUFM_ACTION_COLOR_LV1" || return && allowmulti="NotAllowed"
			if [ -n "$multiselection" ]; then
				# Multi-selection mode
				dmenufm_multiselect "Select files / directories to remove: " "Are you sure you would like to delete all selected files?"
				if [ $(echo $?) -eq 0 ]; then
					for selection in $(printf '%s' "$SELECTED"); do
						rm -rf "$selection"
					done && notifyprompt "Selected removed."
				fi
			elif [ "$actCHOICE" = "$allselection" ]; then
				SELECTED=$(printf '%s' "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d; s=^=$PWD/=g")
				printf '%s' "$SELECTED" | verticalprompt "Selected files (Enter to continue): " "$DMENUFM_ACTION_COLOR_LV1"
				if dangerprompt "Remove all the files / directories in $name?"; then
					for selection in $(printf '%s' "$SELECTED"); do
						rm -rf "$selection"
					done && notifyprompt "All files / directories removed."
				fi
			else
				# Single-selection mode
				allowmulti="NotAllowed"
				# Check the chosen on is directory or not
				[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
				if [ -n "$HERE" ] && dangerprompt "Remove all files and/or subdirectories in $name?" && rm -rf "$HERE"; then
					# If chosen one is directory, send notification and cd to parent directory
					if [ "$result" = "0" ]; then
						notifyprompt "$name removed." || return
						cd "../" || return
						# Reset result value
						result=
					else
						# If not, just send notification.
						notifyprompt "$name removed." || return
					fi
				else
					return
				fi
			fi
			;;
		"$FM_TRH")
			# Allow multiple files to be selected
			allowmulti="Bulk Trash"
			allselection="Bulk Trash all"
			[ ! -d "$DMENUFM_TRASH_PATH" ] && mkdir -p "$DMENUFM_TRASH_PATH"
			trashmenu=$(printf '%s\n' "Move to trash" "Go to trash" "Empty trash" | sed "/^$/ d" | verticalprompt "Dmenufm Trash" "$DMENUFM_GENERIC_COLOR")
			case $trashmenu in
				"Move to trash")
					Generate_action_menu "Move file/directory to trash: " "$DMENUFM_ACTION_COLOR_LV1" || return && allowmulti="NotAllowed"
					if [ -n "$multiselection" ]; then
						# Multi-selection mode
						dmenufm_multiselect "Select files / directories to move to trash: " "Are you sure you would like to move all selected files to trash?"
						if [ $(echo $?) -eq 0 ]; then
							for selection in $(printf '%s' "$SELECTED"); do
								mv "$selection" "$DMENUFM_TRASH_PATH"
							done && notifyprompt "Selected files moved to trash"
						fi
					elif [ "$actCHOICE" = "$allselection" ]; then
						SELECTED=$(printf '%s' "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d; s=^=$PWD/=g")
						printf '%s' "$SELECTED" | verticalprompt "Selected files (Enter to continue): " "$DMENUFM_ACTION_COLOR_LV1"
						if dangerprompt "Move all the files / directories in $name to trash?"; then
							for selection in $(printf '%s' "$SELECTED"); do
								mv "$selection" "$DMENUFM_TRASH_PATH"
							done && notifyprompt "All files / directories moved to trash."
						fi
					else
						# Single-selection mode
						allowmulti="NotAllowed"
						# Check the chosen on is directory or not
						[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
						# Say yes in dangerprompt, and send notification. Or do nothing.
						if [ -n "$HERE" ] && dangerprompt "Move all files and/or subdirectories in $name to trash?" && mv "$HERE" "$DMENUFM_TRASH_PATH"; then
							if [ $result -eq 0 ]; then
								notifyprompt "$name moved to trash." || return
								cd "../" || return
								result=
							else
								notifyprompt "$name moved to trash." || return
							fi
						else
							return
						fi
					fi
					;;
				"Go to trash")
					cd "$DMENUFM_TRASH_PATH" || return
					;;
				"Empty trash")
					# Lesson: You cannot quote a wildcard. No quote on *.
					if dangerprompt "Remove all files and/or directory in trash?" && rm -rf "$DMENUFM_TRASH_PATH"/*; then
						notifyprompt "Trash is empty." || return
					else
						return
					fi
					;;
			esac
			;;
		"$FM_HIS")
			# Use sed command to mimic reverse of cat for POSIX.
			goto=$(sed '1!G;h;$!d' "$DMENUFM_HISFILE" | verticalprompt "Dmenufm History" "$DMENUFM_GENERIC_COLOR")
			destination=$(printf '%s' "$goto" | awk -F ' - ' '{print $2}')
			cd "$destination" || return
			;;
		"$FM_BMK")
			markmenu=$(printf '%s\n' "$(cat "$DMENUFM_BMKFILE")" "Add BMK" "Delete BMK" | sed "/^$/ d" |  verticalprompt "Dmenufm Bookmark" "$DMENUFM_GENERIC_COLOR")
			case "$markmenu" in
				"Add BMK")
					Generate_action_menu "Choose file / directory and add to BMK: " "$DMENUFM_ACTION_COLOR_LV1" || return
					mark=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
					[ -n "$mark" ] && printf '%s\n' "$mark - $HERE" >> "$DMENUFM_BMKFILE"
					[ -n "$mark" ] && sed "/^$/ d" "$DMENUFM_BMKFILE" >  "$DMENUFM_BMKFILE.backup" && cp "$DMENUFM_BMKFILE.backup" "$DMENUFM_BMKFILE"
					;;
				"Delete BMK")
					delbmk=$(< "$DMENUFM_BMKFILE" verticalprompt "Delete chosen bmk: " "darkred") || return
					# POSIX way of sed -i.
					# Assign address as '=' by '\=pattern='
					# Create backup file and cp to original file.
					[ -n "$delbmk" ] && sed "\=$delbmk= d" "$DMENUFM_BMKFILE" > "$DMENUFM_BMKFILE.backup" && cp "$DMENUFM_BMKFILE.backup" "$DMENUFM_BMKFILE"
					;;
				*)
					destination=$(printf '%s' "$markmenu" | awk -F ' - ' '{print $2}')
					if [ -n "$destination" ]; then
						cd "$destination" || open "$destination"
					fi
			esac
			;;
		"$FM_CMD")
			cmdmenu=$(printf '%s\n' "$(cat "$DMENUFM_CMDFILE")" "Add CMD" "Delete CMD" "Type and execute" | sed "/^$/ d" | verticalprompt "Dmenufm Custom Command" "$DMENUFM_GENERIC_COLOR")
			case "$cmdmenu" in
				"Add CMD")
					addcmd=$(horizontalprompt "Recording your command: " "$DMENUFM_ACTION_COLOR_LV1") || return
					desp=$(horizontalprompt "Enter command description: " "$DMENUFM_ACTION_COLOR_LV1") || return
					[ -n "$addcmd" ] && printf '%s\n' "$addcmd - $desp" >> "$DMENUFM_CMDFILE"
					[ -n "$addcmd" ] && sed "/^$/ d" "$DMENUFM_CMDFILE" >  "$DMENUFM_CMDFILE.backup" && cp "$DMENUFM_CMDFILE.backup" "$DMENUFM_CMDFILE"
					;;
				"Delete CMD")
					delcmd=$(< "$DMENUFM_CMDFILE" verticalprompt "Delete chosen command: " "darkred")
					# POSIX way of sed -i.
					# Assign address as '+' by '\+pattern+'
					# '=' seems not usable in command
					# Create backup file and cp to original file.
					[ -n "$delcmd" ] && sed "\+$delcmd+ d" "$DMENUFM_CMDFILE" > "$DMENUFM_CMDFILE.backup" && cp "$DMENUFM_CMDFILE.backup" "$DMENUFM_CMDFILE"
					;;
				"Type and execute")
					execmd=$(horizontalprompt "Type and execute: " "$DMENUFM_ACTION_COLOR_LV1")
					[ -n "$execmd" ] && executecmd "$execmd"
					;;
				*)
					execmd=$(printf '%s' "$cmdmenu" | awk -F ' - ' '{print $1}')
					executecmd "$execmd"
					;;
			esac
			;;
	esac
	dmenufm_menu
}

### MAIN FUNCTIONS

dmenufm_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$ACTION" "$TERM" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | verticalprompt "$twopwd" "$DMENUFM_GENERIC_COLOR")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			open "$PWD"
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../"
			dmenufm_history
		elif [ "$CHOICE" = "$ACTION" ]; then
			dmenufm_action
		elif [ "$CHOICE" = "$TERM" ]; then
			$TERMINAL
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			open "$PWD/$CHOICE"
		else
			break
		fi
	done
}

### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		"-d"|"--directory" )
			keeplist="${keeplist} DIRs"
			;;
		"-f"|"--file" )
			keeplist="${keeplist} FILEs"
			;;
		"-D"|"--dotdirectory" )
			keeplist="${keeplist} DOTDIRs"
			;;
		"-F"|"--dotfile" )
			keeplist="${keeplist} DOTFILEs"
			;;
		"-p"|"--lastpath" )
			outputpath="placeholder"
			;;
		"-h"|"--help" )
			printf " Optional arguments for custom usage:
			-d | --directory: only directories
			-f | --file: only show files
			-D | --dotdirectory: only show hidden directories
			-F | --dotfile: only show hidden files
			-p | --lastpath: opens in last working directory (cd on exit)
			-h | --help: Show this message\\n"
			exit 0
			;;
		*)
			if [ -d "$1" ]; then
				cd "$1"
			else
				printf '%s\n' "Invalid option"
				exit 1
			fi
			;;
	esac
	shift
done

### RUN THE MAIN FUNCTION

# --lastpath option:
[ -n "$outputpath" ] && cd "$(cat "$DMENUFM_LAST_PATH_FILE")"

dmenufm_menu

printf '%s' "$PWD" > "$DMENUFM_LAST_PATH_FILE"
