#!/bin/sh

# Dmenu-based directory browser
# Dependency: dmenu; xclip
# Dependency on extraction: tar; unlzma; bunzip2; unrar;
# 			    unzip; uncompress; 7z; unxz; cabextract.


### OPTIONS AND VARIABLES

## OPTIONS
# FILES LOCATION
[ -n "$FM_PATH" ] || FM_PATH="$HOME/.config/dmenufm"
[ -n "$FM_TRASH" ] || FM_TRASH="$FM_PATH/trash"
[ -n "$FM_BMKFILE" ] || FM_BMKFILE="$FM_PATH/dmenufm_bookmark"
[ -n "$FM_CMDFILE" ] || FM_CMDFILE="$FM_PATH/dmenufm_command"
[ -n "$FM_HISFILE" ] || FM_HISFILE="$FM_PATH/dmenufm_history"
[ -n "$FM_LASTPATH" ] || FM_LASTPATH="$FM_PATH/dmenufm_lastpath"
[ -n "$FM_REMFILE" ] || FM_REMFILE="$FM_PATH/dmenufm_bulk_rename"
[ -n "$FM_ZIPATH" ] || FM_ZIPATH="$FM_PATH/compression/"
# Max number for history
[ -n "$FM_MAX_HIS_LENGTH" ] || FM_MAX_HIS_LENGTH=5000
# FONTS
[ -n "$FM_GENERIC_FONT" ] || FM_GENERIC_FONT='Monospace-15'
[ -n "$FM_NOTIF_FONT" ] || FM_NOTIF_FONT='Monospace-25'
[ -n "$FM_DANGER_FONT" ] || FM_DANGER_FONT='Monospace-20'
# COLORs
[ -n "$FM_GENERIC_COLOR" ] || FM_GENERIC_COLOR='#005577'
[ -n "$FM_ACTION_COLOR_LV1" ] || FM_ACTION_COLOR_LV1='#33691e'
[ -n "$FM_ACTION_COLOR_LV2" ] || FM_ACTION_COLOR_LV2='#FF8C00'
[ -n "$FM_ACTION_COLOR_BULK" ] || FM_ACTION_COLOR_BULK='#CB06CB'

# xdg-open directories
XDGDIR1='/usr/share/applications'
XDGDIR2='/usr/local/share/applications'

## GLOBAL VARIABLES
CHOICE='placeholder'
actCHOICE='placeholder'
allselection='placeholder'
TARGET='./'
BACKWARD='../'
ENDSELECTION='End Selection'
allowbulk='NotAllowed'
ACTION='Actions'
TERM='Terminal'
FM_PCP='PCP - Copy path'
FM_NEW='NEW - Create new file / directory'
FM_DEL='DEL - Delete files / directories'
FM_MVR='MVR - Move files / directories'
FM_YAK='YAK - Copy files / directories'
FM_LNK='LNK - Symbolically link files / directories'
FM_REM='REM - Rename files / directories'
FM_TRH='TRH - Trash of dmenufm'
FM_HIS='HIS - History of dmenufm'
FM_BMK='BMK - Bookmark for dmenufm'
FM_CMD='CMD - Frequently used command'
FM_ZIP='ZIP - Compress files / directories'
ACTLIST="$FM_PCP:$FM_NEW:$FM_MVR:$FM_YAK:$FM_LNK:$FM_DEL:$FM_TRH:$FM_REM:$FM_HIS:$FM_BMK:$FM_CMD:$FM_ZIP"
COMPRESSIONLIST='tar.gz tar.bz2 tar.xz xz lzma gz bz2 7z zip'

### FUNCTIONS

## PRE-DETERMINATION FUNCTION

CheckDeps () {
	DepCount=0
	for CurDep in "$@"; do
		if ! command -v "$CurDep" 1> /dev/null 2>&1; then
			DepCount=$((DepCount + 1))
			printf "ERROR: Dependency '$CurDep' not met." 1>&2
		fi
	done

	[ $DepCount -eq 0 ] || exit 1

	unset CurDep DepCount
}

CheckDeps find tail xdg-mime xdg-open sed awk grep wc cp mv rm

# Disabled, since it's not used and is invalid anyway.
# Check os
#get_os () {
#	case $OSTYPE in
#		# Mac OS X / macOS.
#		darwin*) FM_OPENER=open ;;
#	esac
#}

## OPEN FUNCTIONS

# May need changes to match how your terminal executes the command. See: README.md
executecmd () { # Usage executecmd [CMD]
	appdesktop=$(find "$XDGDIR1" "$XDGDIR2" -name "*${1%% *}*.desktop" | tail -n 1)
	if [ -n "$appdesktop" ] && grep 'Terminal=false' "$appdesktop"; then
		printf '%s' "$1" | ${SHELL:-/bin/sh}
	else
		$TERMINAL -e $1 | ${SHELL:-/bin/sh}
	fi
}

# Open files with xdg-open, if not compression. Compressions are extracted by its
# file extension. Use Extract to put content in a new directory. To edit default
# applications in xdg-open: sudo $EDITOR /usr/share/applications/mimeinfo.cache
open () {
	# Extract files and make a new directory to contain all the files.
	Extract () { # Usage: Extract [CMD] [FILE]
		BaseName=${2##*/}

		CheckDeps "$1"

		if mkdir -p $BaseName; then
			cd "$BaseName"

			$1 "$2"

			notifyprompt "$Choice extracted to $BaseName"
		else
			exit 0
		fi
	}

	mimetype=$(xdg-mime query filetype "$1")

	case $1 in
		*.tar.bz2|*.tar.xz|*.tbz2)
			Extract 'tar xvjf' "$1" ;;
		*.tar.gz|*.tgz)
			Extract 'tar xvzf' "$1" ;;
		*.lzma)
			Extract 'unlzma' "$1" ;;
		*.bz2)
			Extract 'bunzip2' "$1" ;;
		*.rar)
			Extract 'unrar x -ad' "$1" ;;
		*.gz)
			Extract 'gunzip' "$1" ;;
		*.tar)
			Extract 'tar xvf' "$1" ;;
		*.zip)
			Extract 'unzip' "$1" ;;
		*.Z)
			Extract 'uncompress' "$1" ;;
		*.7z)
			Extract '7z x' "$1" ;;
		*.xz)
			Extract 'unxz' "$1" ;;
		*.cab)
			Extract 'cabextract' "$1" ;;
		*)
			case $mimetype in
				text/*|*x-empty*|*json*)
					# Text file opened in $EDITOR or default opener
					if [ -n "$TERMINAL" ] && [ -n "$EDITOR" ]; then
						$TERMINAL -e $EDITOR "$1"
					else
						${FM_OPENER:-xdg-open} "$1"
					fi ;;
				*)
					appdesktop=$(xdg-mime query default "$mimetype")
					if < "$(find "$XDGDIR1" "$XDGDIR2" -name "$appdesktop" \
						| tail -n 1)" grep 'Terminal=false'; then
						${FM_OPENER:-xdg-open} "$1"
					else
						$TERMINAL -e ${FM_OPENER:-xdg-open} "$1"
					fi ;;
			esac ;;
	esac
}


## MENUFUNCTIONS

# Variables can't store multiline string, so change to ':'. Misbehaving due to
# space in file/directory name, so add ' at beginning and end.
#quote () { printf '%s\n' "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }

# Generate directories.
menudir () {
	IFS='
	'

	DIRs=$(
		for dir in *; do
			[ -d "$dir" ] && printf '%s:' "$dir/"
		done
	)

	unset IFS
}

# Generate dotdirectories. Delete extra ./ and ../
menudotdir () {
	IFS='
	'

	DOTDIRs=$(
		for dir in .*; do
			[ -d "$dir" ] && printf '%s:' "$dir/"
		done | sed 's|./||; s|../||')

	unset IFS
}

# Generate files
menufile () {
	IFS='
	'

	FILEs=$(
		for file in *; do
			[ -f "$file" ] && printf '%s:' "$file"
		done
	)

	unset IFS
}

# Generate dotfiles
menudotfile () {
	IFS='
	'

	DOTFILEs=$(
		for file in .*; do
			[ -f "$file" ] && printf '%s:' "$file"
		done
	)

	unset IFS
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update menu in each move
update_menu () {
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}

				# | sed "s/'//g; /^$/ d" \
# Generate menu for action choice, only for current directory.
# $1 is the prompt, $2 is the selected background color
Generate_action_menu () {
	while [ -n "$actCHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu \
			&& list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" \
			| awk -F '/' '{print $(NF-1)"/"$NF}')
		if [ -n "$bulkselection" ]; then
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" \
				"$ENDSELECTION" "$list" \
				| tr ':' '\n' \
				| sed '/^$/ ' \
				| verticalprompt "$1" "$2")
		elif [ "$allowbulk" != 'NotAllowed' ]; then
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" \
				"$allowbulk" "$allselection" "$list" \
				| tr ':' '\n' \
				| sed '/^$/ d' \
				| verticalprompt "$1" "$2")
		else
			actCHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$list" \
				| tr ':' '\n' \
				| sed '/^$/ d' \
				| verticalprompt "$1" "$2")
		fi
		# Outcome matching
		if [ "$actCHOICE" = "$TARGET" ]; then
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" \
				| awk -F '/' '{print $NF}')
			[ -n "$bulkselection" ] \
				&& bulklist="$bulklist:$HERE" \
				&& cd ../
			break
		elif [ "$actCHOICE" = "$BACKWARD" ]; then
			cd ../ || return
			dmenufm_history
		elif [ "$actCHOICE" = "$ENDSELECTION" ]; then
			bulkselection=
			break
		elif [ "$actCHOICE" = "$allowbulk" ]; then
			bulkselection='true'
			break
		elif [ "$actCHOICE" = "$allselection" ]; then
			bulkselection=
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" \
				| awk -F '/' '{print $NF}')
			break
		elif [ -d "$actCHOICE" ]; then
			cd "$actCHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$actCHOICE" ] || [ -n "$rename" ]; then
			HERE=$(printf '%s' "$PWD/$actCHOICE")
			name=$(printf '%s' "$HERE" \
				| awk -F '/' '{print $NF}')
			[ -n "$bulkselection" ] \
				&& bulklist="$bulklist:$HERE"
			break
		else
			HERE=
			name=
			bulkselection=
			actCHOICE='placeholder'
			break
		fi
	done
}

## PROMPT FUNCTIONS
verticalprompt () {
	# $1 is prompt
	dmenu -fn "$FM_GENERIC_FONT" -i -sb "$2" -l 10 -p "$1"
}

horizontalprompt () {
	# $1 is prompt
	dmenu -fn "$FM_GENERIC_FONT" -i -sb "$2" -p "$1" <&-
}

notifyprompt () {
	dmenu -fn "$FM_NOTIF_FONT" -sb '#d79921' -sf '#1d2021' \
		-nf '#000000' -nb '#000000' -p "$1" <&-
}

# Prompt that used in dangerous action
dangerprompt () {
	# From Luke Smith
	# Use && command to execute the command after "Yes"
	[ "$(printf 'No\nYes' \
		| dmenu -fn "$FM_DANGER_FONT" -i -p "$1" \
		-nb darkred -sb red -sf white -nf gray )" = 'Yes' ]
}


## TOOL FUNCTIONS


bulk_all_list () {
	SELECTED=$(printf '%s' "$list" \
		| tr ':' '\n' \
		| sed "/^$/ d; s=^=$PWD/=g")
	[ -n "$SELECTED" ] \
		&& printf '%s' "$SELECTED" \
		| verticalprompt "Selected files (Enter to continue): " "$FM_ACTION_COLOR_LV1"
}

# Store every move between directories into history
dmenufm_history () {
	[ ! -d "$FM_PATH" ] \
		&& mkdir -p "$FM_PATH"
	dirmark=$(printf '%s' "$PWD" \
		| awk -F '/' '{print $NF}')
	printf '%s\n' "$dirmark - $PWD" \
		| sed '/^$/ d' >> "$FM_HISFILE"
	# Limit the max number of history
	hisnum=$(wc -l "$FM_HISFILE" | awk '{print $1}')
	if [ "$hisnum" -ge "$FM_MAX_HIS_LENGTH" ]; then
		sed '1d' "$FM_HISFILE" > "$FM_HISFILE.backup" \
			&& cp "$FM_HISFILE.backup" "$FM_HISFILE"
	fi
}

# Bulk compression

bulk_compress () {
	case $compression_type in
		 'tar.gz') cmd='tar -czvf' ;;
		 'tar.xz') cmd='tar -cJvf' ;;
		'tar.bz2') cmd='tar -cjvf' ;;
		     'gz') cmd='gzip -k' ;;
		    'bz2') cmd='bzip2 -k' ;;
		     'xz') cmd='xz -k' ;;
		   'lzma') cmd='lzma -k' ;;
		     '7z') cmd='7z a' ;;
		    'zip') cmd='zip -r' ;;
		*) return ;;
	esac
	if echo "$compression_type" | grep -E '^tar|^zip'; then
		[ -d "$FM_ZIPATH" ] && rm -rf "$FM_ZIPATH"
		mkdir "$FM_ZIPATH"
		IFS='
		'
		for file in $SELECTED; do
			unset IFS
			cp -R "$file" "$FM_ZIPATH"
		done
		archive_name=$(horizontalprompt "Please insert archive name: " "$FM_ACTION_COLOR_LV2" \
			| cut -d'.' -f1) || return
		compressdir_name=$archive_name
		archive_name="$archive_name.$compression_type"
		mv "$FM_ZIPATH" "./$compressdir_name"
		$cmd $archive_name ./$compressdir_name/* \
			&& notifyprompt "Compressed to $archive_name"
		rm -rf ./$compressdir_name
	else
		IFS='
		'
		for file in $SELECTED; do
			unset IFS
			$cmd "$file" \
				&& notifyprompt "Compressed to $archive_name"
		done
	fi
	## TODO: Add error handling
	## TODO: Make sure you can escape out of all ZIP commands
		# Added, but need testing
}


# Bulk rename function.
# No argument

bulk_rename () {
	if [ -n "$SELECTED" ]; then
		printf '%s\n' "$SELECTED" \
			| sed 's=/$==g' \
			> "$FM_REMFILE.backup"
		awk -F '/' '{print $NF}' "$FM_REMFILE.backup" \
			> "$FM_REMFILE"
		awk -F '/' '{$NF=""; print $0}' "$FM_REMFILE.backup" \
			| tr ' ' '/' \
			> "$FM_REMFILE.dirname"
		open "$FM_REMFILE"
		if [ $(< "$FM_REMFILE" wc -l) \
			-ne $(< "$FM_REMFILE.backup" wc -l) ]; then
			notifyprompt \
				'ERROR: Lines mismatch in rename file; do nothing.' \
				&& return
		else
			renamevar=$(paste -d ':' \
				"$FM_REMFILE.backup" \
				"$FM_REMFILE.dirname" \
				"$FM_REMFILE")
			# Set IFS for for loop as \n
			IFS='
			'
			for selection in $(printf '%s' "$renamevar"); do
				start=$(printf '%s' "$selection" \
					| awk -F ':' '{print $1}')
				destination=$(printf '%s' "$selection" \
					| awk -F ':' '{print $2$3}')
				if [ "$start" = "$destination" ]; then
					continue
				else
					mv "$start" "$destination"
				fi
			done && notifyprompt 'Selected renamed'
			unset IFS
		fi
	else
		return
	fi
}

bulk_command () {
	execfile=$(printf '%s' "$SELECTED")
	execmd=$(printf '%s' "$execmd" | sed '1 s/$.*//')
	IFS='
	'
	for selection in $(printf '%s' "$execfile"); do
		unset IFS
		$execmd "$selection"
	done && notifyprompt 'Command executed on selected.'
}

destmenu () {
	Generate_action_menu 'Destination: ' \
		"$FM_ACTION_COLOR_LV2" \
		|| return \
		&& rename= \
		&& allowbulk='NotAllowed' \
		&& actCHOICE='placeholder'
	[ -n "$HERE" ] \
		&& destination=$HERE \
		&& destname=$name
	if [ -n "$destination" ]; then
		IFS='
		'
		for selection in $(printf '%s' "$SELECTED"); do
			unset IFS
			$cmd "$selection" "$destination"
		done && notifyprompt \
			"Selected files / directories $cmdname to $destname"
	fi

}

dangermenu () {
	cmd=$1
	dangermessage=$2
	destination=$3
	IFS='
	'
	if dangerprompt "$dangermessage"; then
			for selection in $(printf '%s' "$SELECTED"); do
				unset IFS
				if [ -z "$destination" ]; then
					$cmd "$selection"
				else
					$cmd "$selection" "$destination"
				fi
			done && notifyprompt 'Selected removed.'
	fi
}

bulk_mode () {
	# $1 for the prompt when multi selecting
	bulkprompt=$1
	HERE=
	bulklist=
	Generate_action_menu "$bulkprompt" "$FM_ACTION_COLOR_BULK" \
		|| return && allowbulk='NotAllowed'
	while [ -n "$bulkselection" ]; do
		Generate_action_menu "$bulkprompt" "$FM_ACTION_COLOR_BULK" \
			|| return && allowbulk='NotAllowed'
		HERE=$bulklist
		allowbulk='NotAllowed'
	done

	SELECTED=$(printf '%s' "$HERE" \
		| cut -b2- \
		| tr ':' '\n' \
		| uniq)
	allowbulk='NotAllowed'

	[ "$actCHOICE" = "$ENDSELECTION" ] \
		&& printf '%s' "$SELECTED" \
		| verticalprompt 'Selected files (Enter to continue): ' \
		"$FM_ACTION_COLOR_LV1"
}

# Actions that for dmenufm
# Note: Use `[ -n "$VAR" ]` after each menu to check
#	whether the menu is correctly execute.
# 	If not, then the later command will not execute.
dmenufm_action () {
	move=$(printf '%s' "$ACTLIST" \
		| tr ':' '\n' \
		| verticalprompt 'Actions:' "$FM_GENERIC_COLOR")
	case $move in
		"$FM_PCP")
			# Copy path to xclip, and send notification.
			Generate_action_menu 'Copy directory/file path: ' \
				"$FM_ACTION_COLOR_LV1" || return
			[ -n "$HERE" ] && printf '%s' "$HERE" \
				| xclip -selection clipboard \
				&& notifyprompt "Path $name copied to clipboard." ;;
		"$FM_NEW")
			name=$(horizontalprompt 'Dir ends w/ slash; File w/o: ' \
				"$FM_ACTION_COLOR_LV1") || return

			if [ -n "$( printf "$name" | grep '/')" ]; then
				mkdir -p "$name" && notifyprompt "Directory $name created."
			else
				1> "$name" && notifyprompt "File $name created."
			fi ;;
		"$FM_MVR"|"$FM_YAK"|"$FM_LNK")
			case $move in
				"$FM_MVR")
					cmd='mv'
					cmdname='moved'
					cmdverb='move'
					allowbulk='Bulk Move'
					allselection='Bulk Move all'
					;;
				"$FM_YAK")
					cmd='cp -R'
					cmdname='copied'
					cmdverb='copy'
					allowbulk='Bulk Copy'
					allselection='Bulk Copy all'
					;;
				"$FM_LNK")
					cmd='ln -s'
					cmdname='linked'
					cmdverb='link'
					allowbulk='Bulk Link'
					allselection='Bulk Link all'
					;;
			esac
			Generate_action_menu 'Source: ' "$FM_ACTION_COLOR_LV1" \
				|| return \
				&& allowbulk='NotAllowed'
			if [ -n "$bulkselection" ]; then
				# Multi-selection mode
				# No need for dangerousmessage
				bulk_mode "Select files / directories to $cmdverb: "
				[ "$actCHOICE" = "$ENDSELECTION" ] \
					&& destmenu
			elif [ "$actCHOICE" = "$allselection" ]; then
				# All-selection mode
				bulk_all_list
				[ -n "$SELECTED" ] \
					&& destmenu
			else
				# Single-selection mode
				[ -n "$HERE" ] \
					&& SELECTED=$HERE \
					&& rename='true'
				[ -d "$SELECTED" ] \
					&& cd ../
				[ -n "$SELECTED" ] \
					&& destmenu
				rename=
			fi
			;;
		"$FM_ZIP")
			allowbulk='Bulk Compress'
			allselection='Bulk Compress all'

			compression_type=$(printf '%s\n' $COMPRESSIONLIST \
				| verticalprompt 'Compression type: ' "$FM_ACTION_COLOR_LV1" \
				|| return && allowbulk='NotAllowed')

			if echo "$compression_type" | grep -E '^tar|^zip'; then
				continue
			else
				allowbulk='NotAllowed'
			fi
			[ -n "$compression_type" ] \
				&& Generate_action_menu 'Source: ' "$FM_ACTION_COLOR_LV1" \
				|| return \
				&& allowbulk='NotAllowed'
			if [ -n "$bulkselection" ]; then
				bulk_mode 'Select files / directories to compress: '
				[ "$actCHOICE" = "$ENDSELECTION" ] && bulk_compress
			elif [ "$actCHOICE" = "$allselection" ]; then
				bulk_all_list
				bulk_compress
			else
				SELECTED=$HERE
				[ -n "$SELECTED" ] && bulk_compress
			fi
			;;
		"$FM_REM")
			allowbulk='Bulk Rename'
			allselection='Bulk Rename all'
			Generate_action_menu 'Source: ' \
				"$FM_ACTION_COLOR_LV1" \
				|| return \
				&& allowbulk='NotAllowed'
			if [ -n "$bulkselection" ]; then
				bulk_mode 'Select files / directories to rename: '
				[ -n "$SELECTED" ] && bulk_rename
			elif [ "$actCHOICE" = "$allselection" ]; then
				bulk_all_list
				bulk_rename
			else

				SELECTED=$HERE
				[ -n "$SELECTED" ] && bulk_rename
			fi
			;;
		"$FM_DEL")
			# Allow multiple files to be selected
			allowbulk='Bulk Delete'
			allselection='Bulk Delete all'
			# Choose file/directory in current directory to remove
			Generate_action_menu 'Remove file / directory: ' \
				"$FM_ACTION_COLOR_LV1" \
				|| return \
				&& allowbulk='NotAllowed'
			if [ -n "$bulkselection" ]; then
				# Multi-selection mode
				bulk_mode 'Select files / directories to remove: '
				[ "$actCHOICE" = "$ENDSELECTION" ] \
					&& dangermenu 'rm -rf' 'Delete all selected?' ''
			elif [ "$actCHOICE" = "$allselection" ]; then
				bulk_all_list
				dangermenu 'rm -rf' "Delete all selected in $name?" ''
			else
				# Single-selection mode
				allowbulk='NotAllowed'
				# Check the chosen on is directory or not
				[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
				[ -n "$HERE" ] && SELECTED=$HERE \
					&& dangermenu 'rm -rf' "Remove all the files / directories in $name?" ''
					[ $result -eq 0 ] && cd ../ && result=
			fi
			;;
		"$FM_TRH")
			# Allow multiple files to be selected
			allowbulk='Bulk Trash'
			allselection='Bulk Trash all'
			[ ! -d "$FM_TRASH" ] \
				&& mkdir -p "$FM_TRASH"
			trashmenu=$(printf '%s\n' 'Move to trash' \
				'Go to trash' 'Empty trash' \
				| sed '/^$/ d' \
				| verticalprompt 'Dmenufm Trash' "$FM_GENERIC_COLOR")
			case $trashmenu in
				'Move to trash')
					Generate_action_menu 'Move file/directory to trash: ' \
						"$FM_ACTION_COLOR_LV1" \
						|| return \
						&& allowbulk='NotAllowed'
					if [ -n "$bulkselection" ]; then
						# Multi-selection mode
						bulk_mode 'Select files / directories to move to trash: '
						[ "$actCHOICE" = "$ENDSELECTION" ] \
							&& dangermenu 'mv' 'Move all selected to trash?' "$FM_TRASH"
					elif [ "$actCHOICE" = "$allselection" ]; then
						bulk_all_list
						dangermenu 'rm -rf' "Delete all selected in $name?" ''
					else
						# Single-selection mode
						allowbulk='NotAllowed'
						# Check the chosen on is directory or not
						[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
						[ -n "$HERE" ] && SELECTED=$HERE \
							&& dangermenu 'rm -rf' "Remove all the files / directories in $name?" ''
							[ $result -eq 0 ] && cd ../ && result=
					fi ;;
				'Go to trash')
					cd "$FM_TRASH" || return ;;
				'Empty trash')
					# Lesson: You cannot quote a wildcard. No quote on *.
					if dangerprompt 'Remove all files and/or directory in trash?' \
						&& rm -rf "$FM_TRASH"/*; then
						notifyprompt 'Trash is empty.' || return
					else
						return
					fi ;;
			esac
			;;
		"$FM_HIS")
			# Use sed command to mimic reverse of cat for POSIX.
			goto=$(sed '1!G;h;$!d' "$FM_HISFILE" \
				| verticalprompt "Dmenufm History" "$FM_GENERIC_COLOR")
			destination=$(printf '%s' "$goto" \
				| awk -F ' - ' '{print $2}')
			cd "$destination" || return ;;
		"$FM_BMK")
			markmenu=$(printf '%s\n' "$(cat -u "$FM_BMKFILE")" \
				'Add BMK' 'Delete BMK' \
				| sed '/^$/d' \
				|  verticalprompt 'Dmenufm Bookmark' "$FM_GENERIC_COLOR")
			case $markmenu in
				'Add BMK')
					Generate_action_menu 'Choose file / directory and add to BMK: ' \
						"$FM_ACTION_COLOR_LV1" || return
					mark=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
					[ -n "$mark" ] \
						&& printf '%s\n' "$mark - $HERE" >> "$FM_BMKFILE"
					[ -n "$mark" ] \
						&& sed '/^$/d' "$FM_BMKFILE" \
						> "$FM_BMKFILE.backup" \
						&& cp "$FM_BMKFILE.backup" "$FM_BMKFILE" ;;
				'Delete BMK')
					delbmk=$(< "$FM_BMKFILE" \
						verticalprompt 'Delete chosen bmk: ' 'darkred') \
						|| return
					# POSIX way of sed -i.
					# Assign address as '=' by '\=pattern='
					# Create backup file and cp to original file.
					[ -n "$delbmk" ] \
						&& sed "\=$delbmk= d" "$FM_BMKFILE" \
						> "$FM_BMKFILE.backup" \
						&& cp "$FM_BMKFILE.backup" "$FM_BMKFILE" ;;
				*)
					destination=$(printf '%s' "$markmenu" \
						| awk -F ' - ' '{print $2}')
					if [ -n "$destination" ]; then
						cd "$destination" || open "$destination"
					fi
			esac ;;
		"$FM_CMD")
			cmdmenu=$(printf '%s\n' "$(cat -u "$FM_CMDFILE")" \
				'Add CMD' 'Delete CMD' 'Choose and execute' \
				| sed '/^$/ d' \
				| verticalprompt "Dmenufm Custom Command" "$FM_GENERIC_COLOR")
			case $cmdmenu in
				'Add CMD')
					addcmd=$(horizontalprompt 'Recording your command: ' \
						"$FM_ACTION_COLOR_LV1") || return
					desp=$(horizontalprompt 'Enter command description: ' \
						"$FM_ACTION_COLOR_LV1") || return
					[ -n "$addcmd" ] \
						&& printf '%s\n' "$addcmd - $desp" \
						>> "$FM_CMDFILE"
					[ -n "$addcmd" ] \
						&& sed "/^$/ d" "$FM_CMDFILE" \
						> "$FM_CMDFILE.backup" \
						&& cp "$FM_CMDFILE.backup" "$FM_CMDFILE" ;;
				'Delete CMD')
					delcmd=$(< "$FM_CMDFILE" \
						verticalprompt 'Delete chosen command: ' 'darkred')
					# POSIX way of sed -i.
					# Assign address as '+' by '\+pattern+'
					# '=' seems not usable in command
					# Create backup file and cp to original file.
					[ -n "$delcmd" ] \
						&& sed "\:$delcmd: d" "$FM_CMDFILE" \
						> "$FM_CMDFILE.backup" \
						&& cp "$FM_CMDFILE.backup" "$FM_CMDFILE" ;;
				*)
					execmd=$(printf '%s' "$cmdmenu" \
						| awk -F ' - ' '{print $1}')
					if printf '%s' "$execmd" | grep '\$'; then
						allowbulk='Bulk Execute'
						allselection='Bulk Execute all'
						Generate_action_menu 'Choose and execute: ' "$FM_ACTION_COLOR_LV1"
						if [ -n "$bulkselection" ]; then
							bulk_mode 'Select to execute: '
							bulk_command
						elif [ "$actCHOICE" = "$allselection" ]; then
							bulk_all_list
							bulk_command
						else
							SELECTED=$HERE
							bulk_command
						fi
					else
						executecmd "$execmd"
					fi ;;
			esac ;;
	esac
	dmenufm_menu
}

### MAIN FUNCTIONS

dmenufm_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] \
			&& menu \
			&& list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" \
			| awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" \
			"$ACTION" "$TERM" "$list" \
			| tr ':' '\n' \
			| sed '/^$/ d' \
			| verticalprompt "$twopwd" "$FM_GENERIC_COLOR")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			open "$PWD"
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd ../
			dmenufm_history
		elif [ "$CHOICE" = "$ACTION" ]; then
			dmenufm_action
		elif [ "$CHOICE" = "$TERM" ]; then
			$TERMINAL
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			open "$PWD/$CHOICE"
		else
			break
		fi
	done
}

UsageInfo () {
	while read -r CurLine; do
		printf "%b\n" "$CurLine"
	done <<-EOF
		\r            DMENUFM (Ideally, version here; what version am I!?)
		\r            Written by huijunchen9260 <your E-Mail here>
		\r
		\r            Your short description goes here.
		\r
		\rSYNTAX:     dmenufm [OPTS]
		\r
		\rOPTS:       --help|-h               - Show this usage information.
		\r            --directory|-d          - Only directories.
		\r            --file|-f               - Only show files.
		\r            --dotdirectory|-D       - Only show hidden directories.
		\r            --dotfile|-F            - Only show hidden files.
		\r            --lastpath|-p           - Opens in last working directory. (cd on exit)
	EOF

	unset CurLine
}


### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		-h|--help)
			UsageInfo; exit 0 ;;
		-d|--directory)
			keeplist="${keeplist} DIRs" ;;
		-f|--file)
			keeplist="${keeplist} FILEs" ;;
		-D|--dotdirectory)
			keeplist="${keeplist} DOTDIRs" ;;
		-F|--dotfile)
			keeplist="${keeplist} DOTFILEs" ;;
		-p|--lastpath)
			outputpath='placeholder' ;;
		*)
			if [ -d "$1" ]; then
				cd "$1"
			else
				printf 'ERROR: Invalid argument(s) provided.\n' 1>&2
				exit 1
			fi ;;
	esac
	shift
done

### RUN THE MAIN FUNCTION

# --lastpath option:
[ -n "$outputpath" ] && cd "$(cat -u "$FM_LASTPATH")"

dmenufm_menu

printf '%s' "$PWD" > "$FM_LASTPATH"
