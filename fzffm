#!/bin/sh

# source configuration file
FM_PATH="$HOME/.config/fzffm"
FM_CACHE_PATH="$HOME/.cache/fzffm"
[ -r "$FM_PATH/fzffm.conf" ] && . "$FM_PATH/fzffm.conf" || [ -r "/etc/fzffm.conf" ] && . "/etc/fzffm.conf" || echo 'Run `sudo make install` first to install all fzffm files.'

# SUDO setting
export SUDO_ASKPASS="$FM_SDOPROP"

## GLOBAL VARIABLES
CHOICE="placeholder"
actCHOICE="placeholder"
allselection="placeholder"
masselection="placeholder"
TARGET="./"
BACKWARD="../"
ENDSELECTION="End Selection"
allowbulk="NotAllowed"
ACTION="Actions"
TERM="Terminal"
FM_PCP="PCP - Copy path"
FM_NEW="NEW - Create new file / directory"
FM_DEL="DEL - Delete files / directories"
FM_MVV="MVV - Move files / directories"
FM_YAK="YAK - Copy files / directories"
FM_LNK="LNK - Symbolically link files / directories"
FM_REM="REM - Rename files / directories"
FM_TRH="TRH - Trash of fzffm"
FM_HIS="HIS - History of fzffm"
FM_BMK="BMK - Bookmark for fzffm"
FM_CMD="CMD - Frequently used command"
FM_ZIP="ZIP - Compress files / directories"
FM_SDO="SDO - Enable Super user privilege"
# FM_EYE="EYE - Preview files"
ACTLIST=$(printf '%s\n' "$FM_PCP" "$FM_NEW" "$FM_MVV" "$FM_YAK" "$FM_LNK" "$FM_DEL" "$FM_TRH" "$FM_REM" "$FM_HIS" "$FM_BMK" "$FM_CMD" "$FM_ZIP" "$FM_SDO")
COMPRESSIONLIST=$(printf '%s\n' "tar.gz" "tar.bz2" "tar.xz" "xz" "lzma" "gz" "bz2" "7z" "zip")
nl='
'

# Create files / directories
[ ! -d "$FM_PATH" ] && mkdir -p "$FM_PATH"
[ ! -f "$FM_PATH/fzffm.conf" ] && cp "/etc/fzffm.conf" "$FM_PATH/fzffm.conf"
[ ! -d "$FM_CACHE_PATH" ] && mkdir -p "$FM_CACHE_PATH"
[ ! -d "$FM_TRASH" ] && mkdir -p "$FM_TRASH"
printf '%s\n' '#!/bin/sh' 'fzf --reverse --prompt "$1 " <&- && echo' > "$FM_SDOPROP"
chmod +x "$FM_SDOPROP"

. fzffm-open
. fzffm-action
. fzffm-menu


CheckDeps () {
    for CurDep in "$@"; do
	if ! command -v "$CurDep" 1> /dev/null 2>&1; then
	    printf '%s' "ERROR: Dependency $CurDep not met."  1>&2
	fi
    done
    unset CurDep
}

CheckDeps find tail xdg-mime xdg-open sed grep wc cp mv rm paste cut id wmctrl xclip touch

UsageInfo () {
	while read -r CurLine; do
		printf "%b\n" "$CurLine"
	done <<-EOF
		\r            FZFFM
		\r            Written by huijunchen9260 (chen.9260@osu.edu)
		\r
		\r            Simple file manager using fzf
		\r
		\rSYNTAX:     fzffm [OPTS]
		\r
		\rOPTS:       -h | --help               - Show this usage information.
		\r            -d | --directory          - Only directories.
		\r            -f | --file               - Only show files.
		\r            -D | --dotdirectory       - Only show hidden directories.
		\r            -F | --dotfile            - Only show hidden files.
		\r            -p | --lastpath           - Opens in last working directory. (cd on exit)
		\r            -r | --rollingmenu        - Rolling menu based on selected files.
		\r            -t | --termpath           - Print out the path of file / directory.
	EOF

	unset CurLine
}


### ARGUMENTS
while [ -n "$1" ]; do
    case $1 in
	"-d"|"--directory" ) keeplist="${keeplist} DIRs" ;;
	"-f"|"--file" ) keeplist="${keeplist} FILEs" ;;
	"-D"|"--dotdirectory" ) keeplist="${keeplist} DOTDIRs" ;;
	"-F"|"--dotfile" ) keeplist="${keeplist} DOTFILEs" ;;
	"-p"|"--lastpath" ) outputpath="placeholder" ;;
	"-r"|"--rollingmenu") rollingmenu="true" ;;
	"-t"|"--termpath") termpath="true" ;;
	"-h"|"--help" ) UsageInfo; exit 0; ;;
	*)
	    if [ -d "$1" ]; then
		cd "$1" || exit 1
	    elif [ -f "$1" ]; then
		FileOpen "$1"
	    else
		printf '%s\n' "Invalid option. Use -h to read help"
		exit 1
	    fi
	    ;;
    esac
    shift
done

### RUN THE MAIN FUNCTION

# --lastpath option:
[ -n "$outputpath" ] && cd "$(cat -u "$FM_LASTPATH")"

if [ "$(id -u)" -eq 0 ]; then
    # super user privilege
    yprompt () { # Usage yprompt [MSG] [BG_COLOR]
	fzf --reverse --prompt "SUDO: $1 "
    }

    xprompt () { # Usage xprompt [MSG] [BG_COLOR]
	printf '%s' "" | fzf --reverse --prompt "SUDO: $1 "
    }

    DangerPrompt () { # Usage: DangerPrompt [MSG] && ...
	[ "$(printf "No\\nYes" | fzf --reverse --prompt "SUDO: $1 ")" = "Yes" ]
    }

    FM_GENERIC_COLOR="$FM_SUDO_COLOR"

    MainMenu
else
    MainMenu
fi

printf '%s' "$PWD" > "$FM_LASTPATH"
