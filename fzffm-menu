#!/bin/sh


## PROMPT FUNCTIONS
yprompt () { # Usage yprompt [MSG] [BG_COLOR]
	${FM_PROG} $(makePromptOpts reverse nosort prompt) "$1 "
}

xprompt () { # Usage xprompt [MSG] [BG_COLOR]
    printf '%s' "" | ${FM_PROG} $(makePromptOpts reverse nosort prompt) "$1 "
}

NotiPrompt () { # Usage NotiPrompt [MSG]
    printf '%s' "" | ${FM_PROG} $(makePromptOpts reverse nosort prompt) "$1 "
}

DangerPrompt () { # Usage: DangerPrompt [MSG] && ...
    [ "$(printf "No\\nYes" | ${FM_PROG} $(makePromptOpts reverse nosort prompt) "$1")" = "Yes" ]
}


## MENUFUNCTIONS

MenuDir () { # Generate dir
    IFS="$nl"
    DIRs=$(
    for dir in *; do
	[ -d "$dir" ] && printf '%s\n' "$dir/"
    done
)
unset IFS
}

MenuDotDir () { # Generate dotdir
    IFS="$nl"
    DOTDIRs=$(
    for dir in .*; do
	[ -d "$dir" ] && printf '%s\n' "$dir/"
    done | sed "\|^./$| d; \|^../$| d"
)
unset IFS
}

MenuFile () { # Generate file
    IFS="$nl"
    FILEs=$(
    for file in *; do
	[ -f "$file" ] && printf '%s\n' "$file"
    done
)
unset IFS
}

MenuDotFile () { # Generate dorfile
    IFS="$nl"
    DOTFILEs=$(
    for file in .*; do
	[ -f "$file" ] && printf '%s\n' "$file"
    done
)
unset IFS
}

Menu () { # Generate default menu
    MenuDir
    MenuDotDir
    MenuFile
    MenuDotFile
}

UpdateMenu () { # Generate menu based on arguments
    list=
    for element in $keeplist; do
	case $element in
	    DIRs) MenuDir && list=$(printf '%s\n' "$list" "$DIRs") ;;
	    FILEs) MenuFile && list=$(printf '%s\n' "$list" "$FILEs") ;;
	    DOTDIRs) MenuDotDir && list=$(printf '%s\n' "$list" "$DOTDIRs") ;;
	    DOTFILEs) MenuDotFile && list=$(printf '%s\n' "$list" "$DOTFILEs") ;;
	esac
    done
}

ActionMenu () { # Usage: ActionMenu [MSG] [BG_COLOR]
    while [ -n "$actCHOICE" ]; do
	if [ -n "$keeplist" ]; then
	    UpdateMenu
	else
	    Menu && list=$(printf '%s\n' "$DIRs" "$FILEs" "$DOTDIRs" "$DOTFILEs")
	fi
	if [ "$rollingmenu" = "true" ] && [ -f "$rollmenu" ] || [ "$PWD" = "$rolldir" ]; then
		list="$(printf '%s\n' "$rollmenu" "${list#*"$rollmenu"}" "${list%%"$rollmenu"*}")"
		rollmenu=""
		rolldir=""
	fi
	if [ "$bulkselection" = "true" ]; then
	    actCHOICE=$(printf '%s\n' "$BACKWARD" "$TARGET" "$ENDSELECTION" "$FM_HIS" "$list" | sed "/^$/ d" | yprompt "$1" "$2")
	elif [ "$allowbulk" != "NotAllowed" ]; then
	    actCHOICE=$(printf '%s\n' "$BACKWARD" "$TARGET" "$allowbulk" "$allselection" "$masselection" "$FM_HIS" "$list" | sed "/^$/ d" | yprompt "$1" "$2")
	elif [ "$preview" = "true" ]; then
	    actCHOICE=$(printf '%s\n' "$list" "$BACKWARD" "$FM_HIS" | sed "/^$/ d" | yprompt "$1" "$2")
	else
	    actCHOICE=$(printf '%s\n' "$BACKWARD" "$TARGET" "$FM_HIS" "$list" | sed "/^$/ d" | yprompt "$1" "$2")
	fi
	# Outcome matching
	if [ "$actCHOICE" = "$TARGET" ]; then
	    if [ "$termpath" = "true" ]; then
		printf '%s' "$PWD" && actCHOICE=""
		break
	    else
		HERE=$(printf '%s' "$PWD")
		name=$(printf '%s' "${PWD##*/}")
		[ "$bulkselection" = "true" ] && bulklist=$(printf '%s\n' "$bulklist" "$HERE") && cd "../"
		break
	    fi
	elif [ "$actCHOICE" = "$BACKWARD" ]; then
	    if [ "$rollingmenu" = "true" ]; then
		rollmenu="$PWD"
		cd "../" || NotiPrompt "Need super user permission to enter this directory"
		rolldir="${PWD##*/}"
		History "$actCHOICE"
	    else
		cd "../" || NotiPrompt "Need super user permission to enter this directory"
		History "$actCHOICE"
	    fi
	elif [ "$actCHOICE" = "$ENDSELECTION" ]; then
	    bulkselection="false"
	    break
	elif [ "$actCHOICE" = "$allowbulk" ]; then
	    bulkselection="true"
	    break
	elif [ "$actCHOICE" = "$allselection" ] || [ "$actCHOICE" = "$masselection" ]; then
	    bulkselection="false"
	    HERE=$(printf '%s' "$PWD")
	    name=$(printf '%s' "${PWD##*/}")
	    break
	elif [ "$actCHOICE" = "$FM_HIS" ]; then
	    FM_HIS
	    continue
	elif [ -d "$actCHOICE" ]; then
	    if [ "$rollingmenu" = "true" ]; then
		rolldir="$PWD"
		cd "$actCHOICE" || NotiPrompt "Need super user permission to enter this directory"
		rollmenu="$actCHOICE"
		History "$actCHOICE"
	    else
		cd "$actCHOICE" || NotiPrompt "Need super user permission to enter this directory"
		History "$actCHOICE"
	    fi
	    continue
	elif [ -f "$actCHOICE" ]; then
	    if [ "$termpath" = "true" ]; then
		printf '%s' "$PWD/$actCHOICE" && actCHOICE=""
		break
	    else
		rollmenu="$actCHOICE"
		HERE=$(printf '%s' "$PWD/$actCHOICE")
		name=$(printf '%s' "$actCHOICE")
		[ "$bulkselection" = "true" ] && bulklist=$(printf '%s\n' "$bulklist" "$HERE")
		break
	    fi
	else
	    HERE=""
	    name=""
	    bulkselection="false"
	    actCHOICE="placeholder"
	    break
	fi
    done
}

TwoPWD () { # Usage: Show last two level of PWD
    # Need "${PWD##*/}" to prevent special character
    TMP="${PWD%%/"${PWD##*/}"}"
    TMP="${TMP##*/}"
    [ ${#TMP} -ge 30 ] && TMP="$(printf '%s' "$(printf '%s' "$TMP" | cut -b 1-30)...")"
    TMP2="${PWD##*/}"
    [ ${#TMP2} -ge 30 ] && TMP2="$(printf '%s' "$(printf '%s' "$TMP2" | cut -b 1-30)...")"
    TwoPWD="$(printf '%s' "$TMP/$TMP2")"
    unset TMP TMP2
}

MainMenu () { # Usage: MainMenu
    while [ -n "$CHOICE" ]; do
	if [ -n "$keeplist" ]; then
	    UpdateMenu
	else
	    Menu && list=$(printf '%s\n' "$DIRs" "$FILEs" "$DOTDIRs" "$DOTFILEs")
	fi
	if [ "$rollingmenu" = "true" ] && [ -f "$rollmenu" ] || [ "$PWD" = "$rolldir" ]; then
		list="$(printf '%s\n' "$rollmenu" "${list#*"$rollmenu"}" "${list%%"$rollmenu"*}")"
		rollmenu=""
		rolldir=""
	fi
	TwoPWD
	CHOICE=$(printf '%s\n' "$BACKWARD" "$TARGET" "$ACTION" "$TERM" "$list" | sed "/^$/ d" | yprompt "$TwoPWD" "$FM_GENERIC_COLOR")
	# Outcome matching
	if [ "$CHOICE" = "$TARGET" ]; then
	    if [ "$termpath" = "true" ]; then
		printf '%s' "$PWD" && CHOICE=""
		break
	    else
		FileOpen "$PWD"
		History "$CHOICE"
	    fi
	elif [ "$CHOICE" = "$BACKWARD" ]; then
	    if [ "$rollingmenu" = "true" ]; then
		rollmenu="${PWD##*/}/"
		cd "../" || NotiPrompt "Need super user permission to enter this directory"
		rolldir="$PWD"
		History "$CHOICE"
	    else
		cd "../" || NotiPrompt "Need super user permission to enter this directory"
		History "$CHOICE"
	    fi
	elif [ "$CHOICE" = "$ACTION" ]; then
	    FM_Action
	elif [ "$CHOICE" = "$TERM" ]; then
	    $TERMINAL
	elif [ -d "$CHOICE" ]; then
	    if [ "$rollingmenu" = "true" ]; then
		rolldir="$PWD"
		cd "$CHOICE" || NotiPrompt "Need super user permission to enter this directory"
		rollmenu="$CHOICE"
		History "$CHOICE"
	    else
		cd "$CHOICE" || NotiPrompt "Need super user permission to enter this directory"
		History "$CHOICE"
	    fi
	    continue
	elif [ -f "$CHOICE" ]; then
	    if [ "$termpath" = "true" ]; then
		printf '%s' "$PWD/$CHOICE" && CHOICE=""
		break
	    else
		rollmenu="$CHOICE"
		FileOpen "$PWD/$CHOICE"
		History "$CHOICE"
	    fi
	else
	    break
	fi
    done
}
